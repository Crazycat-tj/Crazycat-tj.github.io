<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python-pandas库教程(一)</title>
      <link href="/2021/07/08/python-pandas-ku-jiao-cheng-yi/"/>
      <url>/2021/07/08/python-pandas-ku-jiao-cheng-yi/</url>
      
        <content type="html"><![CDATA[<p>pandas库是python中最流行的库之一，常用于数据处理与分析，可以读取数据文件，生成数据对应数据结构。</p><h3 id="使用pandas"><a href="#使用pandas" class="headerlink" title="使用pandas"></a>使用pandas</h3><p>pandas库是第三方库，没有安装的小伙伴可能需要先安装pandas库。</p><p>推荐使用pip安装：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install pandas<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完毕后，为了使用pandas库，我们可以使用以下命令引用pandas库。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a>生成数据</h3><p>在pandas中，最核心的命令有两个：DataFrame与Series。</p><h5 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h5><p>官方解释：DataFrame是一种表格，它包含一个单个条目数组，每个条目都有一定的值。每一个条目又与一行和一列绑定。</p><p>这么形容有一点抽象，不妨直接来看看样例吧：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Input:</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'Yes'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'No'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Out:</span>YesNo<span class="token number">0</span><span class="token number">50</span><span class="token number">131</span><span class="token number">1</span><span class="token number">21</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由此可见，声明新的数据表的语法是一种字典，其键是列名称，其值为每一列对应的数据。</p><p>在这个例子中，条目“0， No”拥有值131，条目“0，Yes”拥有值50……</p><p>当然，值并不局限于于整数，我们也可以使用别的数据类型，例如字符串等</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#input:</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'Bob'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'I liked it.'</span><span class="token punctuation">,</span> <span class="token string">'It was awful.'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Sue'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pretty good.'</span><span class="token punctuation">,</span> <span class="token string">'Bland.'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Out:</span>BobSue<span class="token number">0</span>I liked it<span class="token punctuation">.</span>Pretty good<span class="token punctuation">.</span><span class="token number">1</span>It was awful<span class="token punctuation">.</span>Bland<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面这种声明方式是我们最常见的，但是很多时候我们并不满足行的名称，即简单的0,1,2……我们可以使用index命令来修改他们。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Input:</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'Bob'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'I liked it.'</span><span class="token punctuation">,</span> <span class="token string">'It was awful.'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               <span class="token string">'Sue'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Pretty good.'</span><span class="token punctuation">,</span> <span class="token string">'Bland.'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Product A'</span><span class="token punctuation">,</span> <span class="token string">'Product B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Out:</span>BobSueProduct AI liked it<span class="token punctuation">.</span>Pretty good<span class="token punctuation">.</span>Product BIt was awful<span class="token punctuation">.</span>Bland<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h5><p>Series是数据值序列。 如果DataFrame是表，则Series就是列表。 直接来看样例吧：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Input:</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Out:</span><span class="token number">0</span>    <span class="token number">1</span><span class="token number">1</span>    <span class="token number">2</span><span class="token number">2</span>    <span class="token number">3</span><span class="token number">3</span>    <span class="token number">4</span><span class="token number">4</span>    <span class="token number">5</span>dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此可见，Series用于生成单列的数据值序列，且没有列名，可以看作是DataFrame的简化版本。换句话说，可以认为DataFrame实际上只是一堆Series“粘在一起”。</p><p>我们也可以使用index来修改行名,用name来修改名称。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Input:</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'2015 Sales'</span><span class="token punctuation">,</span> <span class="token string">'2016 Sales'</span><span class="token punctuation">,</span> <span class="token string">'2017 Sales'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Product A'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Out:</span><span class="token number">2015</span> Sales    <span class="token number">30</span><span class="token number">2016</span> Sales    <span class="token number">35</span><span class="token number">2017</span> Sales    <span class="token number">40</span>Name<span class="token punctuation">:</span> Product A<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><p>DataFrame和Series常用于我们生成数据表，然而，这可能需要我们亲手输入数据，而这显然不太合理。因此在实际使用时，我们常常需要从别的文件中读取数据来生成数据表。已知的数据文件的存储方式千奇百怪，这里以最常见的CSV文件为例：</p><p>常见的CSV文件打开后一般可以看到这样的存储模式</p><pre class="line-numbers language-CSV" data-language="CSV"><code class="language-CSV">Product A,Product B,Product C,30 ,21   ,9        ,35       ,34       ,1        ,41       ,11       ,11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可见，CSV文件是由逗号分隔的值表。 因此，全名为：“Comma-Separated Values”。</p><p>在pandas库中，我们可以使用<code>pd.read_csv()</code>命令来读取文件。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">wine_reviews <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"../input/wine-reviews/winemag-data-130k-v2.csv"</span><span class="token punctuation">)</span><span class="token comment">#注：这里是做一个示范，在实际使用时，请将路径换成您电脑中CSV文件的存储路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在读取数据后，我们可以使用<code>shape</code>命令来查看数据的大小 (注意，不带括号)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Input:</span>wine_reviews<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Out:</span><span class="token punctuation">(</span><span class="token number">129971</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>说明我们的数据有129971行，14列</p><p>使用<code>head()</code>命令可以帮助我们快速查看前5条数据：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">#Input:wine_reviews.head()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th align="left"></th><th align="left">Unnamed0</th><th align="left">country</th><th align="left">description</th><th align="left">designation</th><th align="left">points</th><th align="left">price</th><th align="left">province</th><th align="left">region_1</th><th align="left">region_2</th><th align="left">taster_name</th><th align="left">taster_twitter_handle</th><th align="left">title</th><th align="left">variety</th><th>winery</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">0</td><td align="left">Italy</td><td align="left">Aromas include tropical fruit, broom, brimston…</td><td align="left">Vulkà Bianco</td><td align="left">87</td><td align="left">NaN</td><td align="left">Sicily &amp; Sardinia</td><td align="left">Etna</td><td align="left">NaN</td><td align="left">Kerin O’Keefe</td><td align="left">@kerinokeefe</td><td align="left">Nicosia 2013 Vulkà Bianco (Etna)</td><td align="left">White Blend</td><td>Nicosia</td></tr><tr><td align="left">1</td><td align="left">1</td><td align="left">Portugal</td><td align="left">This is ripe and fruity, a wine that is smooth…</td><td align="left">Avidagos</td><td align="left">87</td><td align="left">15.0</td><td align="left">Douro</td><td align="left">NaN</td><td align="left">NaN</td><td align="left">Roger Voss</td><td align="left">@vossroger</td><td align="left">Quinta dos Avidagos 2011 Avidagos Red (Douro)</td><td align="left">Portuguese Red</td><td>Quinta dos Avidagos</td></tr><tr><td align="left">2</td><td align="left">2</td><td align="left">US</td><td align="left">Tart and snappy, the flavors of lime flesh and…</td><td align="left">NaN</td><td align="left">87</td><td align="left">14.0</td><td align="left">Oregon</td><td align="left">Willamette Valley</td><td align="left">Willamette Valley</td><td align="left">Paul Gregutt</td><td align="left">@paulgwine</td><td align="left">Rainstorm 2013 Pinot Gris (Willamette Valley)</td><td align="left">Pinot Gris</td><td>Rainstorm</td></tr><tr><td align="left">3</td><td align="left">3</td><td align="left">US</td><td align="left">Pineapple rind, lemon pith and orange blossom …</td><td align="left">Reserve Late Harvest</td><td align="left">87</td><td align="left">13.0</td><td align="left">Michigan</td><td align="left">Lake Michigan Shore</td><td align="left">NaN</td><td align="left">Alexander Peartree</td><td align="left">NaN</td><td align="left">St. Julian 2013 Reserve Late Harvest Riesling …</td><td align="left">Riesling</td><td>St. Julian</td></tr><tr><td align="left">4</td><td align="left">4</td><td align="left">US</td><td align="left">Much like the regular bottling from 2012, this…</td><td align="left">Vintner’s Reserve Wild Child Block</td><td align="left">87</td><td align="left">65.0</td><td align="left">Oregon</td><td align="left">Willamette Valley</td><td align="left">Willamette Valley</td><td align="left">Paul Gregutt</td><td align="left">@paulgwine</td><td align="left">Sweet Cheeks 2012 Vintner’s Reserve Wild Child…</td><td align="left">Pinot Noir</td><td>Sweet Cheeks</td></tr></tbody></table><p>其实，read_csv函数是一个很好用的函数，它有差不多30个可选用的参数供我们使用。例如，我们可以使用index_col参数来让数据表采用内置的行名。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">wine_reviews <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"../input/wine-reviews/winemag-data-130k-v2.csv"</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>wine_reviews<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th align="left"></th><th align="left">country</th><th align="left">description</th><th align="left">designation</th><th align="left">points</th><th align="left">price</th><th align="left">province</th><th align="left">region_1</th><th align="left">region_2</th><th align="left">taster_name</th><th align="left">taster_twitter_handle</th><th align="left">title</th><th align="left">variety</th><th>winery</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">Italy</td><td align="left">Aromas include tropical fruit, broom, brimston…</td><td align="left">Vulkà Bianco</td><td align="left">87</td><td align="left">NaN</td><td align="left">Sicily &amp; Sardinia</td><td align="left">Etna</td><td align="left">NaN</td><td align="left">Kerin O’Keefe</td><td align="left">@kerinokeefe</td><td align="left">Nicosia 2013 Vulkà Bianco (Etna)</td><td align="left">White Blend</td><td>Nicosia</td></tr><tr><td align="left">1</td><td align="left">Portugal</td><td align="left">This is ripe and fruity, a wine that is smooth…</td><td align="left">Avidagos</td><td align="left">87</td><td align="left">15.0</td><td align="left">Douro</td><td align="left">NaN</td><td align="left">NaN</td><td align="left">Roger Voss</td><td align="left">@vossroger</td><td align="left">Quinta dos Avidagos 2011 Avidagos Red (Douro)</td><td align="left">Portuguese Red</td><td>Quinta dos Avidagos</td></tr><tr><td align="left">2</td><td align="left">US</td><td align="left">Tart and snappy, the flavors of lime flesh and…</td><td align="left">NaN</td><td align="left">87</td><td align="left">14.0</td><td align="left">Oregon</td><td align="left">Willamette Valley</td><td align="left">Willamette Valley</td><td align="left">Paul Gregutt</td><td align="left">@paulgwine</td><td align="left">Rainstorm 2013 Pinot Gris (Willamette Valley)</td><td align="left">Pinot Gris</td><td>Rainstorm</td></tr><tr><td align="left">3</td><td align="left">US</td><td align="left">Pineapple rind, lemon pith and orange blossom …</td><td align="left">Reserve Late Harvest</td><td align="left">87</td><td align="left">13.0</td><td align="left">Michigan</td><td align="left">Lake Michigan Shore</td><td align="left">NaN</td><td align="left">Alexander Peartree</td><td align="left">NaN</td><td align="left">St. Julian 2013 Reserve Late Harvest Riesling …</td><td align="left">Riesling</td><td>St. Julian</td></tr><tr><td align="left">4</td><td align="left">US</td><td align="left">Much like the regular bottling from 2012, this…</td><td align="left">Vintner’s Reserve Wild Child Block</td><td align="left">87</td><td align="left">65.0</td><td align="left">Oregon</td><td align="left">Willamette Valley</td><td align="left">Willamette Valley</td><td align="left">Paul Gregutt</td><td align="left">@paulgwine</td><td align="left">Sweet Cheeks 2012 Vintner’s Reserve Wild Child…</td><td align="left">Pinot Noir</td><td>Sweet Cheeks</td></tr></tbody></table><h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><p>在修改完数据后，我们也可以保存数据，使用to_csv函数即可，to_csv是DataFrame的一个函数，直接使用在目标文件上。</p><p>例如，现在有一个数据表名为animals，想要将其以<code>cows_and_goats.csv</code>的名称保存下来，可以采取下面的代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">animals<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"cows_and_goats.csv"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有关读取、保存函数的参数其实有很多，这里不一一解释了，有兴趣的同学可以自行去看官方文档哦。</p><h3 id="选取特定列或行"><a href="#选取特定列或行" class="headerlink" title="选取特定列或行"></a>选取特定列或行</h3><h5 id="Python原生方式"><a href="#Python原生方式" class="headerlink" title="Python原生方式"></a>Python原生方式</h5><p>前面说过，DataFame可以看作多个Series粘合起来，因此我们可以采用一定的方法从DataFrame中选取特定的列或者选取特定的值。</p><p>Python的原生语法就有两种方法可以让我们选取列，例如现在有一个名为Review的DataFrame，包含多个列，其中有一列名为Country，那么我们可以这样引用：</p><ul><li>Review.Country</li><li>Review[“Country”]</li></ul><p>输出结果（注：只是个参考结果）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">0</span>            Italy<span class="token number">1</span>         Portugal              <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token number">129969</span>      France<span class="token number">129970</span>      FranceName<span class="token punctuation">:</span> country<span class="token punctuation">,</span> Length<span class="token punctuation">:</span> <span class="token number">129971</span><span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> <span class="token builtin">object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两种应用方式都可行，但是在实际使用时我更建议使用第二种方式，因为第一种方式可能会因为保留字而出现问题。</p><p>同样的，Series的格式非常像字典，我们可以这样选取特定的位置的值：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">Review['Country'][0]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">'Italy'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="Pandas扩展"><a href="#Pandas扩展" class="headerlink" title="Pandas扩展"></a>Pandas扩展</h5><p>上面的几种方式属于python的原生索引方式，为了更进一步的对数据进行选取和处理操作，我们可以使用某些Pandas的拓展方法。常用的有两个函数，<code>loc</code>和<code>iloc</code>。</p><h6 id="Index-based-selection"><a href="#Index-based-selection" class="headerlink" title="Index-based selection"></a>Index-based selection</h6><p>Pandas索引在两个范式之一中工作。 第一个是基于索引的选择：根据数据中的数字位置选择数据。iloc就是采用这种模式的函数。</p><p>例如，要在DataFrame中选择第一行数据，我们可以这样做：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">review<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">country                                                    Italydescription    Aromas include tropical fruit, broom, brimston...                                      ...                        variety                                              White Blendwinery                                                   NicosiaName: 0, Length: 13, dtype: object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：loc和iloc都是行首先，列第二。 这与我们在Python原生的索引中所做的相反，它是列首先，行第二。</p><p>这意味着它更容易检索行，并略微更难获取检索列。但也不是不能检索列，参考下面的代码：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">review.iloc[:, 0]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">0            Italy1         Portugal            ...   129969      France129970      FranceName: country, Length: 129971, dtype: object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，：也来自于python的原生语法，表示everything。如果将它与特定的参数结合，那么就可以限定一定的范围。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">review<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">#引用3行，第0列的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">0       Italy1    Portugal2          USName: country, dtype: object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者，可以这样使用：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">review.iloc[1:3, 0]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">1    Portugal2          USName: country, dtype: object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Pandas还允许我们以列表来索引：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">review.iloc[[0, 1, 2], 0]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">0</span>       Italy<span class="token number">1</span>    Portugal<span class="token number">2</span>          USName<span class="token punctuation">:</span> country<span class="token punctuation">,</span> dtype<span class="token punctuation">:</span> <span class="token builtin">object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以使用负数来作为索引，同样的，与列表的用法一样，负数表示从末位元素开始索引。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">review.iloc[-5:] #数据较大，就不做示范了，表示截取表格的最后5行数据<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="Label-based-selection"><a href="#Label-based-selection" class="headerlink" title="Label-based selection"></a>Label-based selection</h6><p>第二种索引方式用于检索标签值。我们使用loc函数来完成索引。</p><p>例如，截取第一行country的值可以这样写：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">review<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'country'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">'Italy'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>iloc与loc的概念区分：</p><p>iloc 在概念上比 loc 简单，因为它忽略了数据集的索引。 当我们使用 iloc 时，我们将数据集视为一个大矩阵，我们必须按位置对其进行索引。 相比之下，loc 使用索引中的信息来完成其工作。 由于您的数据集通常具有有意义的索引，因此使用 loc 来做事情通常更容易。</p></blockquote><p>同理，loc也可以这样使用：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">review.loc[:, ['taster_name', 'taster_twitter_handle', 'points']]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="如何选择loc还是iloc"><a href="#如何选择loc还是iloc" class="headerlink" title="如何选择loc还是iloc"></a>如何选择loc还是iloc</h6><p>这两种方法在语义学上含义与作用是一样的。除了根据检索的方式来选择，我们还需要注意一点。</p><p>iloc使用 Python stdlib 索引方案，其中包含范围的第一个元素，排除最后一个元素。 所以 0:10 将选择条目 0,…,9。 同时，loc 包含索引。 所以 0:10 将选择条目 0,…,10。</p><p>因此，在使用索引[0:1000]时，iloc包含1000条数据，loc包含1001条数据。</p><h3 id="修改标签"><a href="#修改标签" class="headerlink" title="修改标签"></a>修改标签</h3><p>基于标签的选择源自索引中的标签。 至关重要的是，我们使用的索引不是一成不变的。 我们可以以任何我们认为合适的方式操作索引。 set_index() 方法可用于完成这项工作。 例如，对review数据表使用这种命令，会在第二行新建一行索引。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">review.set_index("title")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="left"></th><th align="left">country</th><th align="left">description</th><th align="left">designation</th><th align="left">points</th><th align="left">price</th><th align="left">province</th><th align="left">region_1</th><th align="left">region_2</th><th align="left">taster_name</th><th align="left">taster_twitter_handle</th><th align="left">variety</th><th align="left">winery</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">Nicosia 2013 Vulkà Bianco (Etna)</td><td align="left">Italy</td><td align="left">Aromas include tropical fruit, broom, brimston…</td><td align="left">Vulkà Bianco</td><td align="left">87</td><td align="left">NaN</td><td align="left">Sicily &amp; Sardinia</td><td align="left">Etna</td><td align="left">NaN</td><td align="left">Kerin O’Keefe</td><td align="left">@kerinokeefe</td><td align="left">White Blend</td><td align="left">Nicosia</td></tr><tr><td align="left">Quinta dos Avidagos 2011 Avidagos Red (Douro)</td><td align="left">Portugal</td><td align="left">This is ripe and fruity, a wine that is smooth…</td><td align="left">Avidagos</td><td align="left">87</td><td align="left">15.0</td><td align="left">Douro</td><td align="left">NaN</td><td align="left">NaN</td><td align="left">Roger Voss</td><td align="left">@vossroger</td><td align="left">Portuguese Red</td><td align="left">Quinta dos Avidagos</td></tr><tr><td align="left">…</td><td align="left">…</td><td align="left">…</td><td align="left">…</td><td align="left">…</td><td align="left">…</td><td align="left">…</td><td align="left">…</td><td align="left">…</td><td align="left">…</td><td align="left">…</td><td align="left">…</td><td align="left">…</td></tr><tr><td align="left">Domaine Marcel Deiss 2012 Pinot Gris (Alsace)</td><td align="left">France</td><td align="left">A dry style of Pinot Gris, this is crisp with …</td><td align="left">NaN</td><td align="left">90</td><td align="left">32.0</td><td align="left">Alsace</td><td align="left">Alsace</td><td align="left">NaN</td><td align="left">Roger Voss</td><td align="left">@vossroger</td><td align="left">Pinot Gris</td><td align="left">Domaine Marcel Deiss</td></tr><tr><td align="left">Domaine Schoffit 2012 Lieu-dit Harth Cuvée Caroline Gewurztraminer (Alsace)</td><td align="left">France</td><td align="left">Big, rich and off-dry, this is powered by inte…</td><td align="left">Lieu-dit Harth Cuvée Caroline</td><td align="left">90</td><td align="left">21.0</td><td align="left">Alsace</td><td align="left">Alsace</td><td align="left">NaN</td><td align="left">Roger Voss</td><td align="left">@vossroger</td><td align="left">Gewürztraminer</td><td align="left">Domaine Schoffit</td></tr></tbody></table><h3 id="Condition-Selection"><a href="#Condition-Selection" class="headerlink" title="Condition Selection"></a>Condition Selection</h3><p>到目前为止，我们做的大多是查看固定的几行数据。然而，为了用数据做有趣的事情，我们经常需要根据条件提出问题。例如，假设我们对意大利生产的优于平均水平的葡萄酒特别感兴趣。</p><p>我们可以先检查每种酒是否是意大利酒：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">review.country == 'Italy'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">0          True1         False          ...  129969    False129970    FalseName: country, Length: 129971, dtype: bool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此操作根据每条记录的国家/地区生成一系列 True/False 布尔值。 </p><p>然后可以在 loc 内部使用此结果来选择相关数据。</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">reviews.loc[reviews.country == 'Italy']<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有时候我们有多个问题，因此我们可以使用与号 (&amp;) 将两个问题放在一起：</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">reviews.loc[(reviews.country == 'Italy') &amp; (reviews.points &gt;= 90)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同理，或运算(|)也同样成立</p><p><strong>注意</strong>：每一个逻辑判断都需要添加自己的括号，否则会出现TypeError</p><p>除此之外，pandas库中也有很多好用的用于检索问题的函数。</p><ul><li>isin(): isin 允许您选择值“在”值列表中的数据</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">reviews<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>reviews<span class="token punctuation">.</span>country<span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Italy'</span><span class="token punctuation">,</span> <span class="token string">'France'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>isnull: 此方法使您可以突出显示（或不是）空 (NaN) 的值。</li></ul><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">reviews.loc[reviews.price.notnull()]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="分配数据"><a href="#分配数据" class="headerlink" title="分配数据"></a>分配数据</h3><p>为数据表分配数据或者修改数据的值的方法也很简单，我们可以这样做</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">reviews['critic'] = 'everyone'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以一次性修改大量的值，使用值迭代即可：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">reviews<span class="token punctuation">[</span><span class="token string">'index_backwards'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>reviews<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#表示修改index_backwards的值从review的数据个数开始，依次减少1，直至0（但不等于0）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">0         1299711         129970           ...  129969         2129970         1Name: index_backwards, Length: 129971, dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第一次写教程博客，如有不对的地方还请多多谅解，有问题的同学也可以和我联系哦~</p></blockquote><p>参考学习资料：<a href="https://www.kaggle.com/learn/pandas">Learn Pandas Tutorials | Kaggle</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
